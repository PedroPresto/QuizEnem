# Nome do workflow
name: Deploy Quiz Enem to VPS with Docker Compose

# Gatilho: rodar sempre que houver um push na branch 'main'
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Faz o checkout do código do seu repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configura a chave SSH para acesso seguro ao VPS
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.2
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      # 3. Copia os arquivos do projeto para o VPS
      # Usamos rsync para sincronizar os arquivos de forma eficiente
      - name: Copy project files to VPS
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
          ./ ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/home/${{ secrets.VPS_USERNAME }}/quiz-enem-app

      # 4. Acessa o VPS e executa os comandos de deploy com Docker Compose
      - name: Deploy on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Navega até à pasta do projeto no servidor
            cd /home/${{ secrets.VPS_USERNAME }}/quiz-enem-app
            
            # Cria o ficheiro .env no servidor com os segredos do GitHub
            echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" > .env
            echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            
            # ▼▼▼ COMANDO ADICIONADO ABAIXO ▼▼▼
            # Garante que os containers antigos são parados e removidos antes de começar.
            docker-compose down
            
            # Constrói e inicia os novos containers em segundo plano.
            docker-compose up --build -d